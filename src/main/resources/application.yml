server:
  port: 8082
  netty:
    connection-timeout: 2s
  shutdown: graceful

spring:
  application:
    name: gateway-service
  lifecycle:
    timeout-per-shutdown-phase: 15s
  config:
    import: "optional:configserver:" # import configuration data from a config server
  session:
    store-type: redis
    timeout: 10s
    redis:
      namespace: casha:gateway
  redis:
    connection-timeout: 2s
    host: localhost
    port: 6379
    timeout: 500ms
  security:
    oauth2:
      client:
        registration:
          spring:
            provider: spring
            client-id: clientB
            client-secret: secret
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_basic
            redirect-uri: '{baseUrl}/login/oauth2/code/{registrationId}'
            scope: read,openid
        provider:
          spring:
            issuer-uri: ${OAUTH2_CLIENT_ISSUER_URI:http://127.0.0.1:9000}
  cloud:
    gateway:
      default-filters:
        - SaveSession
        - TokenRelay
        - name: RequestRateLimiter
          args:
            # number of tokes dripped in the bucket each second
            redis-rate-limiter.replenishRate: 10
            redis-rate-limiter.burstCapacity: 20
            # how many token a request costs
            redis-rate-limiter.requestedTokens: 1
        - name: Retry
          args:
            retries: 3
            methods: GET
            series: SERVER_ERROR # retry only when 5xx errors
            #  retry only when the given exceptions are thrown
            exceptions: java.io.IOException, java.util.concurrent.TimeoutException
            backoff:
              firstBackoff: 50ms
              maxBackOff: 500ms
              factor: 2
              # retry with a delay computed as firstBackoff * (factor ^ n)
              basedOnPreviousValue: false

      routes:
        - id: profile-route
          uri: ${PROFILE_SERVICE_URL:http://127.0.0.1:8080}
          predicates:
            - Path=/me
          filters:
#            - AddRequestHeader=X-Tenant,acme
#            - AddResponseHeader=X-Genre,fantasy
            - name: CircuitBreaker
              args:
                name: profileCircuitBreaker
                fallbackUri: forward:/profile-fallback
    config:
#      enabled: false
      uri: http://localhost:8888
      username: user
      password: secret

resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowSize: 6
        # Number of permitted calls when the circuit is half-open
        permittedNumberOfCallsInHalfOpenState: 5
        # Number of permitted calls when the circuit is half-open
        failureRateThreshold: 50
        # Waiting time before moving from open to half-open (ms)
        waitDurationInOpenState: 15000
  timelimiter:
    configs:
      default:
        timeoutDuration: 5s

logging:
  level:
    org.springframework: TRACE
#    io.github.resilience4j: DEBUG
#    org.springframework.cloud.gateway: TRACE
